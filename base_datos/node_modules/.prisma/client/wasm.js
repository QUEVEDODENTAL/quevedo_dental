
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.12.1
 * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
 */
Prisma.prismaVersion = {
  client: "5.12.1",
  engine: "473ed3124229e22d881cb7addf559799debae1ab"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  edad: 'edad',
  fecha_nacimiento: 'fecha_nacimiento',
  genero: 'genero',
  especialidad: 'especialidad',
  direccion: 'direccion',
  telefono: 'telefono',
  celular: 'celular',
  curp: 'curp',
  cedula: 'cedula',
  sexo: 'sexo',
  licencia_medica: 'licencia_medica',
  correo_electronico: 'correo_electronico'
};

exports.Prisma.EmpleadoScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  fecha_nacimiento: 'fecha_nacimiento',
  genero: 'genero',
  telefono: 'telefono',
  correo_electronico: 'correo_electronico',
  direccion: 'direccion',
  puesto: 'puesto',
  curp: 'curp',
  rfc: 'rfc',
  salario: 'salario',
  fecha_contratacion: 'fecha_contratacion'
};

exports.Prisma.ClientesScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  apellido: 'apellido',
  sexo: 'sexo',
  edad: 'edad',
  fecha_nacimiento: 'fecha_nacimiento',
  domicilio: 'domicilio',
  telefono: 'telefono',
  curp: 'curp',
  correo_electronico: 'correo_electronico',
  tipo_sangre: 'tipo_sangre',
  ocupacion: 'ocupacion',
  escolaridad: 'escolaridad'
};

exports.Prisma.EnfermedadesScalarFieldEnum = {
  id_enfermedad: 'id_enfermedad',
  tipo: 'tipo',
  otro: 'otro',
  causas: 'causas',
  sintomas: 'sintomas',
  tratamiento: 'tratamiento'
};

exports.Prisma.AntecedentesNoPatologicosScalarFieldEnum = {
  id_paciente: 'id_paciente',
  tabaquismo: 'tabaquismo',
  toxicomanias: 'toxicomanias',
  alcoholismo: 'alcoholismo',
  sedentarismo: 'sedentarismo',
  cirugias: 'cirugias',
  ejercicio: 'ejercicio'
};

exports.Prisma.AntecedentesPatologicosScalarFieldEnum = {
  id: 'id',
  paciente_id: 'paciente_id',
  enfermedad: 'enfermedad',
  fecha_diagnostico: 'fecha_diagnostico',
  tipo_enfermedad: 'tipo_enfermedad',
  cronica: 'cronica',
  tratamiento: 'tratamiento',
  observaciones: 'observaciones'
};

exports.Prisma.ExamenClinicoIntraoralScalarFieldEnum = {
  id_paciente: 'id_paciente',
  fecha_examen: 'fecha_examen',
  encia: 'encia',
  lengua: 'lengua',
  paladar_duro: 'paladar_duro',
  paladar_blando: 'paladar_blando',
  faringe: 'faringe',
  piso_de_la_boca: 'piso_de_la_boca',
  reborde_residual: 'reborde_residual',
  tipo_oclusion: 'tipo_oclusion',
  observaciones: 'observaciones'
};

exports.Prisma.HistorialClinicoScalarFieldEnum = {
  id: 'id',
  cliente_id: 'cliente_id',
  dentista_id: 'dentista_id',
  fecha_consulta: 'fecha_consulta',
  datos_clinicos: 'datos_clinicos'
};

exports.Prisma.PermisoScalarFieldEnum = {
  id: 'id',
  permiso: 'permiso',
  descripcion: 'descripcion'
};

exports.Prisma.BitacoraScalarFieldEnum = {
  id: 'id',
  fecha_hora: 'fecha_hora',
  usuario: 'usuario',
  accion: 'accion',
  tabla: 'tabla',
  id_registro: 'id_registro',
  descripcion: 'descripcion'
};

exports.Prisma.UsuariosScalarFieldEnum = {
  Id: 'Id',
  Email: 'Email',
  Password: 'Password',
  IsAdministrator: 'IsAdministrator',
  IsDoctor: 'IsDoctor',
  IsEmployee: 'IsEmployee'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.GeneroEnum = exports.$Enums.GeneroEnum = {
  Masculino: 'Masculino',
  Femenino: 'Femenino',
  Otro: 'Otro'
};

exports.TipoEnfermedadEnum = exports.$Enums.TipoEnfermedadEnum = {
  Cardiovasculares: 'Cardiovasculares',
  Hematologicas: 'Hematologicas',
  Neurologicas: 'Neurologicas',
  Pulmonares: 'Pulmonares',
  Endocrinas: 'Endocrinas',
  Metabolicas: 'Metabolicas',
  Renales: 'Renales',
  Mentales: 'Mentales',
  Gastrointestinales: 'Gastrointestinales',
  Dermatologicas: 'Dermatologicas',
  Cancer: 'Cancer',
  Otros: 'Otros',
  EnfermedadesDeLaInfancia: 'EnfermedadesDeLaInfancia'
};

exports.SiNoEnum = exports.$Enums.SiNoEnum = {
  Si: 'Si',
  No: 'No'
};

exports.Prisma.ModelName = {
  Doctor: 'Doctor',
  Empleado: 'Empleado',
  Clientes: 'Clientes',
  Enfermedades: 'Enfermedades',
  AntecedentesNoPatologicos: 'AntecedentesNoPatologicos',
  AntecedentesPatologicos: 'AntecedentesPatologicos',
  ExamenClinicoIntraoral: 'ExamenClinicoIntraoral',
  HistorialClinico: 'HistorialClinico',
  Permiso: 'Permiso',
  Bitacora: 'Bitacora',
  Usuarios: 'Usuarios'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
